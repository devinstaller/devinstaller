from cerberus import errors as errors
from cerberus.platform import Container as Container, Hashable as Hashable, Iterable as Iterable, Mapping as Mapping, Sequence as Sequence, Sized as Sized
from cerberus.schema import DefinitionSchema as DefinitionSchema, SchemaError as SchemaError, rules_set_registry as rules_set_registry, schema_registry as schema_registry
from cerberus.utils import TypeDefinition as TypeDefinition, drop_item_from_tuple as drop_item_from_tuple, readonly_classproperty as readonly_classproperty
from typing import Any, Optional

toy_error_handler: Any

def dummy_for_rule_validation(rule_constraints: Any): ...

class DocumentError(Exception): ...
class _SchemaRuleTypeError(Exception): ...

class BareValidator:
    mandatory_validations: Any = ...
    priority_validations: Any = ...
    types_mapping: Any = ...
    document: Any = ...
    recent_error: Any = ...
    document_error_tree: Any = ...
    schema_error_tree: Any = ...
    document_path: Any = ...
    schema_path: Any = ...
    update: bool = ...
    error_handler: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    @classmethod
    def clear_caches(cls) -> None: ...
    @property
    def allow_unknown(self): ...
    @allow_unknown.setter
    def allow_unknown(self, value: Any) -> None: ...
    @property
    def require_all(self): ...
    @require_all.setter
    def require_all(self, value: Any) -> None: ...
    @property
    def errors(self): ...
    @property
    def ignore_none_values(self): ...
    @ignore_none_values.setter
    def ignore_none_values(self, value: Any) -> None: ...
    @property
    def is_child(self): ...
    @property
    def purge_unknown(self): ...
    @purge_unknown.setter
    def purge_unknown(self, value: Any) -> None: ...
    @property
    def purge_readonly(self): ...
    @purge_readonly.setter
    def purge_readonly(self, value: Any) -> None: ...
    @property
    def root_allow_unknown(self): ...
    @property
    def root_require_all(self): ...
    @property
    def root_document(self): ...
    @property
    def rules_set_registry(self): ...
    @rules_set_registry.setter
    def rules_set_registry(self, registry: Any) -> None: ...
    @property
    def root_schema(self): ...
    @property
    def schema(self): ...
    @schema.setter
    def schema(self, schema: Any) -> None: ...
    @property
    def schema_registry(self): ...
    @schema_registry.setter
    def schema_registry(self, registry: Any) -> None: ...
    def types(cls): ...
    def normalized(self, document: Any, schema: Optional[Any] = ..., always_return_document: bool = ...): ...
    def validate(self, document: Any, schema: Optional[Any] = ..., update: bool = ..., normalize: bool = ...): ...
    __call__: Any = ...
    def validated(self, *args: Any, **kwargs: Any): ...

RULE_SCHEMA_SEPARATOR: str

class InspectedValidator(type):
    def __new__(cls, *args: Any): ...
    def __init__(cls, *args: Any): ...

Validator: Any
