from typing import Any, Optional

class HookspecMarker:
    project_name: Any = ...
    def __init__(self, project_name: Any) -> None: ...
    def __call__(self, function: Optional[Any] = ..., firstresult: bool = ..., historic: bool = ..., warn_on_impl: Optional[Any] = ...): ...

class HookimplMarker:
    project_name: Any = ...
    def __init__(self, project_name: Any) -> None: ...
    def __call__(self, function: Optional[Any] = ..., hookwrapper: bool = ..., optionalhook: bool = ..., tryfirst: bool = ..., trylast: bool = ...): ...

def normalize_hookimpl_opts(opts: Any) -> None: ...
def varnames(func: Any): ...

class _HookRelay: ...

class _HookCaller:
    name: Any = ...
    argnames: Any = ...
    kwargnames: Any = ...
    multicall: Any = ...
    spec: Any = ...
    def __init__(self, name: Any, hook_execute: Any, specmodule_or_class: Optional[Any] = ..., spec_opts: Optional[Any] = ...) -> None: ...
    def has_spec(self): ...
    def set_specification(self, specmodule_or_class: Any, spec_opts: Any) -> None: ...
    def is_historic(self): ...
    def get_hookimpls(self): ...
    def __call__(self, *args: Any, **kwargs: Any): ...
    def call_historic(self, result_callback: Optional[Any] = ..., kwargs: Optional[Any] = ..., proc: Optional[Any] = ...) -> None: ...
    def call_extra(self, methods: Any, kwargs: Any): ...

class HookImpl:
    function: Any = ...
    plugin: Any = ...
    opts: Any = ...
    plugin_name: Any = ...
    def __init__(self, plugin: Any, plugin_name: Any, function: Any, hook_impl_opts: Any) -> None: ...

class HookSpec:
    namespace: Any = ...
    function: Any = ...
    name: Any = ...
    opts: Any = ...
    argnames: Any = ...
    warn_on_impl: Any = ...
    def __init__(self, namespace: Any, name: Any, opts: Any) -> None: ...
