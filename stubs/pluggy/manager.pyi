from .hooks import HookImpl as HookImpl, normalize_hookimpl_opts as normalize_hookimpl_opts
from typing import Any, Optional

class PluginValidationError(Exception):
    plugin: Any = ...
    def __init__(self, plugin: Any, message: Any) -> None: ...

class DistFacade:
    def __init__(self, dist: Any) -> None: ...
    @property
    def project_name(self): ...
    def __getattr__(self, attr: Any, default: Optional[Any] = ...): ...
    def __dir__(self): ...

class PluginManager:
    project_name: Any = ...
    trace: Any = ...
    hook: Any = ...
    def __init__(self, project_name: Any, implprefix: Optional[Any] = ...): ...
    def register(self, plugin: Any, name: Optional[Any] = ...): ...
    def parse_hookimpl_opts(self, plugin: Any, name: Any): ...
    def unregister(self, plugin: Optional[Any] = ..., name: Optional[Any] = ...): ...
    def set_blocked(self, name: Any) -> None: ...
    def is_blocked(self, name: Any): ...
    def add_hookspecs(self, module_or_class: Any) -> None: ...
    def parse_hookspec_opts(self, module_or_class: Any, name: Any): ...
    def get_plugins(self): ...
    def is_registered(self, plugin: Any): ...
    def get_canonical_name(self, plugin: Any): ...
    def get_plugin(self, name: Any): ...
    def has_plugin(self, name: Any): ...
    def get_name(self, plugin: Any): ...
    def check_pending(self) -> None: ...
    def load_setuptools_entrypoints(self, group: Any, name: Optional[Any] = ...): ...
    def list_plugin_distinfo(self): ...
    def list_name_plugin(self): ...
    def get_hookcallers(self, plugin: Any): ...
    def add_hookcall_monitoring(self, before: Any, after: Any): ...
    def enable_tracing(self): ...
    def subset_hook_caller(self, name: Any, remove_plugins: Any): ...
